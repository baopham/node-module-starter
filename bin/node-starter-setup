#!/usr/bin/env node

const path = require('path');
const fs = require('fs-extra');
const { execSync } = require('child_process');
const inquirer = require('inquirer');
const chalk = require('chalk');
const program = require('commander');
const print = console.log;

program
  .option('--skip-files', 'Skip setting up files (e.g. travis, editorconfig, git hooks, etc.)')
  .option('--skip-deps', 'Skip installing dependencies')
  .option('--skip-scripts', 'Skip setting up npm scripts')
  .option('--override-files', 'Override current config files but will not remove any existing files')
  .option('--override-scripts', 'Override the current npm scripts but will not remove any existing scripts')
  .parse(process.argv);

setup();

function setup() {
  setupProject();
  ask()
    .then(setupFiles)
    .then(setupDependencies)
    .then(setupScripts)
    .then(done);
}

function ask() {
  return inquirer.prompt([
    {
      type: 'confirm',
      name: 'useFlow',
      message: 'Do you want to use flow?'
    },
    {
      type: 'confirm',
      name: 'useYarn',
      message: 'Do you want to use yarn?'
    },
    {
      type: 'confirm',
      name: 'useJest',
      message: 'Do you want to use jest?'
    }
  ]);
}

function setupProject() {
  if (!fs.pathExistsSync(path.resolve('package.json'))) {
    execSync('npm init', { stdio: 'inherit' });
  }
}

function setupFiles(answers) {
  if (program.skipFiles) return answers;

  print(chalk.green('Setting up config files...'));

  const filenames = [
    '.travis.yml',
    '.editorconfig',
    '.eslintrc',
    '.gitignore',
    '.lintstagedrc'
  ];

  if (answers.useFlow) filenames.push('.flowconfig');

  filenames.forEach(filename => templateToFile(filename.replace(/^\./, ''), filename));
  templateToFile(answers.useFlow ? 'babelrc.flow' : 'babelrc.no-flow', '.babelrc');

  return answers;

  function templateToFile(template, filename) {
    const dest = path.resolve(filename);
    const source = path.resolve(path.join(__dirname, '..', 'templates', template));
    fs.copySync(source, dest, { overwrite: program.overrideFiles });
  }
}

function setupDependencies(answers) {
  if (program.skipDeps) return answers;

  print(chalk.green('Installing all the common dependencies...'));

  const devDeps = [
    'eslint',
    'eslint-config-pretty-standard',
    'eslint-plugin-import',
    'prettier',
    '@babel/cli',
    '@babel/core',
    '@babel/preset-env',
    'babel-eslint',
    'lint-staged',
    'husky'
  ];

  if (answers.useJest) devDeps.push('jest', 'babel-core@^7.0.0-0');
  if (answers.useFlow) devDeps.push('flow-bin', '@babel/preset-flow');

  const cmd = answers.useYarn ? 'yarn add --dev' : 'npm install --save-dev';

  execSync(`${cmd} ${devDeps.join(' ')}`, { stdio: 'inherit' });

  return answers;
}

function setupScripts(answers) {
  if (program.skipScripts) return answers;

  const packagePath = path.resolve('package.json');
  const package = require(packagePath);

  if (!package.scripts) package.scripts = {};

  const repo = package.name;
  const tests = [
    'npm run lint'
  ];

  if (answers.useFlow) tests.push('npm run flow');
  if (answers.useJest) tests.push('jest');

  const scripts = {
    test: tests.join(' && '),
    build: 'babel src/ -d lib/',
    lint: 'eslint ./src/**/*.js',
    prettier: `prettier --write --single-quote './src/**/*.{js,json,css}'`,
    preversion: 'npm test && npm run build && git add -f lib',
    flow: answers.useFlow ? 'flow' : null,
    precommit: 'lint-staged'
  };

  Object.keys(scripts).forEach(command => {
    if (!scripts[command]) return;
    if (!program.overrideScripts && package.scripts[command]) return;
    package.scripts[command] = scripts[command];
  });

  if (!package['lint-staged'] || program.overrideScripts) {
    package['lint-staged'] = {
      '*.js': [
        'npm run prettier',
        'git add'
      ]
    };
  }

  fs.writeJson(packagePath, package, { spaces: 2 });

  return answers;
}

function done() {
  print(chalk.green('Done!'));
}
